{"version":3,"sources":["../../../src/js/args/utils.js"],"names":["handleType","value","type","constructor","String","Array","Number","parseInt","readOption","option","defaultValue","contents","usage","name","fromArgs","raw","count","propVal","isArray","_","push","condition","init","toString","length","getOptions","definedSubcommand","options","args","details","Object","assign","hasOwnProperty","call","related","isDefined","availableOptions","forEach","opt","suggestOption","findBestMatch","console","log","bestMatch","rating","suggestion","filter","item","flag","target","generateDetails","trim","showHelp","generateExamples","examples","parts","printSubColor","description","printMainColor","kind","items","isCmd","sort","a","b","first","second","initial","join","isVersion","indexOf","longest","slice","difference","repeat","JSON","stringify","runCommand","config","help","sub","concat","shift","bind","list","children","child"],"mappings":"oiCAGe,CACbA,UADa,qBACFC,KADE,CACK,CAChB,GAAIC,MAAOD,KAAX,CADgB,MAEK,UAAjB,QAAOA,MAFK,GAGdC,KAAOD,MAAME,WAHC,EAQRD,IARQ,GASTE,MATS,CAUL,CAAC,SAAD,CAVK,CAQRF,IARQ,GAWTG,KAXS,CAYL,CAAC,QAAD,CAZK,CAQRH,IARQ,GAaTI,MAbS,EAQRJ,IARQ,GAcTK,QAdS,CAeL,CAAC,KAAD,CAAQA,QAAR,CAfK,CAiBL,CAAC,EAAD,CAEZ,CApBY,CAsBbC,UAtBa,qBAsBFC,MAtBE,CAsBM,CACjB,GAAIR,OAAQQ,OAAOC,YAAnB,CACMC,SAAW,EADjB,yEADiB,IAKjB,wBAAmBF,OAAOG,KAA1B,4GAAiC,IAAtBC,KAAsB,aACzBC,SAAW,KAAKC,GAAL,CAASF,IAAT,CADc,CAEP,WAApB,QAAOC,SAFoB,GAG7Bb,MAAQa,QAHqB,CAKhC,CAVgB,oLAYjB,GAAIE,OAAQ,CAAC,CAAb,4EAZiB,IAcjB,eAASH,KAAT,YAAiBJ,OAAOG,KAAxB,gHAA+B,CAAtBC,KAAsB,cAC7BG,OAAS,CADoB,CAE7B,GAAIC,SAAUhB,KAAd,CAIEI,MAAMa,OAAN,CAAcT,OAAOC,YAArB,GACA,oBAAOO,QAAP,qBAAOA,OAAP,aAA0BR,OAAOC,YAAjC,CAP2B,GASb,CAAV,OATuB,EAUzB,KAAKK,GAAL,CAASI,CAAT,CAAWC,IAAX,CAAgBH,OAAhB,CAVyB,CAY3BA,QAAU,CAACA,OAAD,CAZiB,EAgBI,WAA/B,QAAOR,QAAOC,YAAd,EACA,oBAAOO,QAAP,qBAAOA,OAAP,aAA0BR,OAAOC,YAAjC,CAjB2B,GAmBb,CAAV,OAnBuB,EAoBzB,KAAKK,GAAL,CAASI,CAAT,CAAWC,IAAX,CAAgBH,OAAhB,CApByB,CAsB3BA,QAAUR,OAAOC,YAtBU,EAyB7B,GAAIW,aAAJ,CAEIZ,OAAOa,IA3BkB,GA6BvBb,OAAOa,IAAP,GAAgBC,QA7BO,GA8BzBF,UAAYJ,QAAQd,WAAR,GAAwBG,MA9BX,EAiCvBe,SAjCuB,GAmCzBJ,QAAUR,OAAOa,IAAP,CAAYL,OAAZ,CAnCe,GAwCX,CAAd,OAAKO,MAxCoB,GAyC3BX,MAAO,qBAAUA,KAAV,CAzCoB,EA6C7BF,SAASE,KAAT,EAAiBI,OAClB,CA5DgB,2LA8DjB,MAAON,SACR,CArFY,CAuFbc,UAvFa,qBAuFFC,iBAvFE,CAuFiB,gBACtBC,QAAU,EADY,CAEtBC,KAAO,EAFe,gFAK5B,eAAWnB,OAAX,YAAqB,KAAKoB,OAAL,CAAaF,OAAlC,iHAAWlB,OAAX,cACqC,WAA/B,QAAOA,SAAOC,YADpB,GAKEoB,OAAOC,MAAP,CAAcJ,OAAd,CAAuB,KAAKnB,UAAL,CAAgBC,OAAhB,CAAvB,CAV0B,2LAc5BqB,OAAOC,MAAP,CAAcH,IAAd,CAAoB,KAAKb,GAAzB,CAd4B,CAe5B,GAAMI,gCAAQS,KAAKT,CAAb,EAAN,CAIA,IAAK,GAAMV,OAAX,GAHA,OAAOmB,MAAKT,CAGZ,CAAqBS,IAArB,CACE,GAAK,GAAGI,cAAH,CAAkBC,IAAlB,CAAuBL,IAAvB,CAA6BnB,MAA7B,CAAL,EAGA,GAAMyB,SAAU,KAAKC,SAAL,CAAe1B,MAAf,CAAuB,SAAvB,CAAhB,CAEA,GAAIyB,OAAJ,CAAa,CACX,GAAML,SAAU,KAAKrB,UAAL,CAAgB0B,OAAhB,CAAhB,CACAJ,OAAOC,MAAP,CAAcJ,OAAd,CAAuBE,OAAvB,CACD,CAEIK,OAAD,EAAaR,iBAVjB,aAYE,GAAMU,kBAAmB,EAAzB,CACA,MAAKP,OAAL,CAAaF,OAAb,CAAqBU,OAArB,CAA6B,SAACC,GAAD,CAAS,CACpCF,iBAAiBhB,IAAjB,2CAAyBkB,IAAI1B,KAA7B,EACD,CAFD,CAbF,CAiBE,GAAM2B,eAAgB,2BAAiBC,aAAjB,CACpB/B,MADoB,CAEpB2B,gBAFoB,CAAtB,CAOA,GAFAK,QAAQC,GAAR,gBAA2BjC,MAA3B,iBAEA,CAAsC,GAAlC,gBAAckC,SAAd,CAAwBC,MAA5B,CAA2C,CACzCH,QAAQC,GAAR,CAAY,oCAAZ,CADyC,CAGzC,GAAMG,YAAa,MAAKhB,OAAL,CAAaF,OAAb,CAAqBmB,MAArB,CAA4B,SAACC,IAAD,CAAU,oFACvD,eAAWC,IAAX,YAAmBD,KAAKnC,KAAxB,gHACE,GADSoC,IACT,cAAIA,OAAST,cAAcI,SAAd,CAAwBM,MAArC,CACE,QAHmD,2LAOvD,QACD,CARkB,CAAnB,CAUAR,QAAQC,GAAR,CAAe,MAAKQ,eAAL,CAAqBL,UAArB,EAAiC,CAAjC,EAAoCM,IAApC,EAAf,MACD,CAdD,IAeEV,SAAQC,GAAR,CAAY,8CAAZ,CAfF,CAgBE,MAAKU,QAAL,EAxCJ,IA8CF,MADAzB,SAAQR,CAAR,CAAYA,CACZ,CAAOQ,OACR,CA1JY,CA4Jb0B,gBA5Ja,4BA4JM,IACTC,SADS,CACI,KAAKzB,OADT,CACTyB,QADS,CAEXC,MAAQ,EAFG,CAIjB,IAAK,GAAMR,KAAX,GAAmBO,SAAnB,CACE,GAAK,GAAGtB,cAAH,CAAkBC,IAAlB,CAAuBqB,QAAvB,CAAiCP,IAAjC,CAAL,EAGA,GAAMnC,OAAQ,KAAK4C,aAAL,MAAwBF,SAASP,IAAT,EAAenC,KAAvC,CAAd,CACM6C,YAAc,KAAKC,cAAL,MAAyBJ,SAASP,IAAT,EAAeU,WAAxC,CADpB,CAEAF,MAAMnC,IAAN,MAAgBqC,WAAhB,YAAsC7C,KAAtC,QALA,CAQF,MAAO2C,MACR,CA1KY,CA4KbL,eA5Ka,0BA4KGS,IA5KH,CA4KS,CAEpB,GAAMC,OAAwB,QAAhB,QAAOD,KAAP,8BAA+B,KAAK9B,OAAL,CAAa8B,IAAb,CAA/B,gCAAyDA,IAAzD,EAAd,CACMJ,MAAQ,EADd,CAEMM,MAAiB,UAAT,OAFd,CAmBA,IAAK,GAAMd,KAAX,GAdAa,OAAME,IAAN,CAAW,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACnB,GAAMC,OAAQJ,MAAQE,EAAEnD,KAAV,CAAkBmD,EAAEnD,KAAF,CAAQ,CAAR,CAAhC,CACMsD,OAASL,MAAQG,EAAEpD,KAAV,CAAkBoD,EAAEpD,KAAF,CAAQ,CAAR,CADjC,CAGA,WACE,IAAKqD,OAAQC,MAAb,CACE,MAAO,CAAC,CAAR,CACF,IAAKD,OAAQC,MAAb,CACE,MAAO,EAAP,CACF,QACE,MAAO,EAAP,CANJ,CAQD,CAZD,CAcA,CAAmBN,KAAnB,CACE,GAAK,GAAG5B,cAAH,CAAkBC,IAAlB,CAAuB2B,KAAvB,CAA8Bb,IAA9B,CAAL,KAIMnC,MAJN,CAIgBgD,MAAMb,IAAN,CAJhB,CAIMnC,KAJN,CAKIuD,QAAUP,MAAMb,IAAN,EAAYrC,YAL1B,CAQA,GAAIE,MAAMT,WAAN,GAAsBE,KAA1B,CACE,GAAIwD,KAAJ,CACEjD,MAAQA,MAAMwD,IAAN,CAAW,IAAX,CADV,KAEO,CACL,GAAMC,WAAYzD,MAAM0D,OAAN,CAAc,GAAd,CAAlB,CACA1D,UAAYA,MAAM,CAAN,CAAZ,QAA2BA,MAAM,CAAN,CAFtB,CAIAuD,OAJA,GAKHA,QAAUP,MAAMb,IAAN,EAAYzB,IALnB,EAQLV,OAASuD,SAAyB,CAAC,CAAf,YAAX,KACD,KAAKnE,UAAL,CAAgBmE,OAAhB,EAAyB,CAAzB,CADC,CAEL,EACL,CAIHP,MAAMb,IAAN,EAAYnC,KAAZ,CAAoBA,KA1BpB,CA+BF,GAAM2D,SAAUX,MAAMY,KAAN,GAAcV,IAAd,CAAmB,SAACC,CAAD,CAAIC,CAAJ,QAAUA,GAAEpD,KAAF,CAAQY,MAAR,CAAiBuC,EAAEnD,KAAF,CAAQY,MAAnC,CAAnB,EAA8D,CAA9D,EAAiEZ,KAAjE,CAAuEY,MAAvF,4EArDoB,IAuDpB,0BAAmBoC,KAAnB,gHAA0B,IAAfb,MAAe,cAClBnC,KADkB,CACKmC,KADL,CAClBnC,KADkB,CACX6C,WADW,CACKV,KADL,CACXU,WADW,CAEhB/C,YAFgB,CAECqC,KAFD,CAEhBrC,YAFgB,CAGlB+D,WAAaF,QAAU3D,MAAMY,MAHX,CAMxBZ,OAAS,IAAI8D,MAAJ,CAAWD,UAAX,CANe,CASI,WAAxB,QAAO/D,aATa,GAUM,SAAxB,QAAOA,aAVW,CAWpB+C,mBAAoB/C,aAAe,SAAf,CAA2B,UAA/C,gBAXoB,CAapB+C,8BAAgCkB,KAAKC,SAAL,CAAelE,YAAf,CAAhC,IAboB,EAgBxB6C,MAAMnC,IAAN,MAAgB,KAAKsC,cAAL,CAAoB9C,KAApB,CAAhB,MAA+C,KAAK4C,aAAL,CAAmBC,WAAnB,CAA/C,CACD,CAxEmB,2LA0EpB,MAAOF,MACR,CAvPY,CAyPbsB,UAzPa,qBAyPFhD,OAzPE,CAyPOF,OAzPP,CAyPgB,CAO3B,GALsB,MAAlB,WAAQf,KAAR,EAA6B,KAAKkE,MAAL,CAAYC,IAK7C,GAJElD,QAAQP,IAAR,GAIF,EAAIO,QAAQP,IAAZ,CAAkB,CAChB,GAAM0D,KAAM,GAAGC,MAAH,CAAU,KAAKD,GAAf,CAAZ,CAGA,MAFAA,KAAIE,KAAJ,EAEA,CAAOrD,QAAQP,IAAR,CAAa6D,IAAb,CAAkB,IAAlB,EAAwBtD,QAAQjB,KAAhC,CAAuCoE,GAAvC,CAA4CrD,OAA5C,CACR,CAED,MAAO,EACR,CAxQY,CA0QbQ,SA1Qa,oBA0QHtB,IA1QG,CA0QGuE,IA1QH,CA0QS,CAEpB,GAAMC,UAAW,KAAKxD,OAAL,CAAauD,IAAb,CAAjB,4EAFoB,IAKpB,0BAAoBC,QAApB,gHAA8B,IAAnBC,MAAmB,cACpB1E,KADoB,CACV0E,KADU,CACpB1E,KADoB,CAEtBV,KAAOU,MAAMT,WAFS,CAI5B,GAAID,OAASG,KAAT,EAAwC,CAAC,CAAvB,OAAMiE,OAAN,CAAczD,IAAd,CAAtB,CACE,MAAOyE,MAAP,CAGF,GAAIpF,OAASE,MAAT,EAAmBQ,QAAUC,IAAjC,CACE,MAAOyE,MAEV,CAhBmB,2LAmBpB,QACD,CA9RY,C","file":"utils.js","sourcesContent":["import camelcase from 'lodash.camelcase';\r\nimport stringSimilarity from 'string-similarity';\r\n\r\nexport default {\r\n  handleType(value) {\r\n    let type = value;\r\n    if (typeof value !== 'function') {\r\n      type = value.constructor;\r\n    }\r\n\r\n    // Depending on the type of the default value,\r\n    // select a default initializer function\r\n    switch (type) {\r\n      case String:\r\n        return ['[value]'];\r\n      case Array:\r\n        return ['<list>'];\r\n      case Number:\r\n      case parseInt:\r\n        return ['<n>', parseInt];\r\n      default:\r\n        return [''];\r\n    }\r\n  },\r\n\r\n  readOption(option) {\r\n    let value = option.defaultValue;\r\n    const contents = {};\r\n\r\n    // If option has been used, get its value\r\n    for (const name of option.usage) {\r\n      const fromArgs = this.raw[name];\r\n      if (typeof fromArgs !== 'undefined') {\r\n        value = fromArgs;\r\n      }\r\n    }\r\n\r\n    let count = -1;\r\n    // Process the option's value\r\n    for (let name of option.usage) {\r\n      count += 1;\r\n      let propVal = value;\r\n\r\n      // Convert the value to an array when the option is called just once\r\n      if (\r\n        Array.isArray(option.defaultValue) &&\r\n        typeof propVal !== typeof option.defaultValue\r\n      ) {\r\n        if (count === 0) {\r\n          this.raw._.push(propVal);\r\n        }\r\n        propVal = [propVal];\r\n      }\r\n\r\n      if (\r\n        typeof option.defaultValue !== 'undefined' &&\r\n        typeof propVal !== typeof option.defaultValue\r\n      ) {\r\n        if (count === 0) {\r\n          this.raw._.push(propVal);\r\n        }\r\n        propVal = option.defaultValue;\r\n      }\r\n\r\n      let condition = true;\r\n\r\n      if (option.init) {\r\n        // Only use the toString initializer if value is a number\r\n        if (option.init === toString) {\r\n          condition = propVal.constructor === Number;\r\n        }\r\n\r\n        if (condition) {\r\n          // Pass it through the initializer\r\n          propVal = option.init(propVal);\r\n        }\r\n      }\r\n\r\n      // Camelcase option name (skip short flag)\r\n      if (name.length > 1) {\r\n        name = camelcase(name);\r\n      }\r\n\r\n      // Add option to list\r\n      contents[name] = propVal;\r\n    }\r\n\r\n    return contents;\r\n  },\r\n\r\n  getOptions(definedSubcommand) {\r\n    const options = {};\r\n    const args = {};\r\n\r\n    // Set option defaults\r\n    for (const option of this.details.options) {\r\n      if (typeof option.defaultValue === 'undefined') {\r\n        continue; // eslint-disable-line\r\n      }\r\n\r\n      Object.assign(options, this.readOption(option));\r\n    }\r\n\r\n    // Copy over the arguments\r\n    Object.assign(args, this.raw);\r\n    const _ = [...args._];\r\n    delete args._;\r\n\r\n    // Override defaults if used in command line\r\n    for (const option in args) {\r\n      if (!{}.hasOwnProperty.call(args, option)) {\r\n        continue; // eslint-disable-line\r\n      }\r\n      const related = this.isDefined(option, 'options');\r\n\r\n      if (related) {\r\n        const details = this.readOption(related);\r\n        Object.assign(options, details);\r\n      }\r\n\r\n      if (!related && !definedSubcommand) {\r\n        // Unknown Option\r\n        const availableOptions = [];\r\n        this.details.options.forEach((opt) => {\r\n          availableOptions.push(...opt.usage);\r\n        });\r\n\r\n        const suggestOption = stringSimilarity.findBestMatch(\r\n          option,\r\n          availableOptions,\r\n        );\r\n\r\n        console.log(`The option \"${option}\" is unknown.`); // eslint-disable-line\r\n\r\n        if (suggestOption.bestMatch.rating >= 0.5) {\r\n          console.log(' Did you mean the following one?\\n'); // eslint-disable-line\r\n\r\n          const suggestion = this.details.options.filter((item) => {\r\n            for (const flag of item.usage) {\r\n              if (flag === suggestOption.bestMatch.target) {\r\n                return true;\r\n              }\r\n            }\r\n\r\n            return false;\r\n          });\r\n\r\n          console.log(`${this.generateDetails(suggestion)[0].trim()}\\n`); // eslint-disable-line\r\n        } else {\r\n          console.log(' Here\\'s a list of all available options: \\n'); // eslint-disable-line\r\n          this.showHelp();\r\n        }\r\n      }\r\n    }\r\n\r\n    options._ = _;\r\n    return options;\r\n  },\r\n\r\n  generateExamples() {\r\n    const { examples } = this.details;\r\n    const parts = [];\r\n\r\n    for (const item in examples) {\r\n      if (!{}.hasOwnProperty.call(examples, item)) {\r\n        continue; // eslint-disable-line\r\n      }\r\n      const usage = this.printSubColor(`$ ${examples[item].usage}`);\r\n      const description = this.printMainColor(`- ${examples[item].description}`);\r\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\r\n    }\r\n\r\n    return parts;\r\n  },\r\n\r\n  generateDetails(kind) {\r\n    // Get all properties of kind from global scope\r\n    const items = typeof kind === 'string' ? [...this.details[kind]] : [...kind];\r\n    const parts = [];\r\n    const isCmd = kind === 'commands';\r\n\r\n    // Sort items alphabetically\r\n    items.sort((a, b) => {\r\n      const first = isCmd ? a.usage : a.usage[1];\r\n      const second = isCmd ? b.usage : b.usage[1];\r\n\r\n      switch (true) {\r\n        case first < second:\r\n          return -1;\r\n        case first > second:\r\n          return 1;\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n\r\n    for (const item in items) {\r\n      if (!{}.hasOwnProperty.call(items, item)) {\r\n        continue; // eslint-disable-line\r\n      }\r\n\r\n      let { usage } = items[item];\r\n      let initial = items[item].defaultValue;\r\n\r\n      // If usage is an array, show its contents\r\n      if (usage.constructor === Array) {\r\n        if (isCmd) {\r\n          usage = usage.join(', ');\r\n        } else {\r\n          const isVersion = usage.indexOf('v');\r\n          usage = `-${usage[0]}, --${usage[1]}`;\r\n\r\n          if (!initial) {\r\n            initial = items[item].init;\r\n          }\r\n\r\n          usage += initial && isVersion === -1\r\n            ? ` ${this.handleType(initial)[0]}`\r\n            : '';\r\n        }\r\n      }\r\n\r\n      // Overwrite usage with readable syntax\r\n      items[item].usage = usage;\r\n    }\r\n\r\n    // Find length of longest option or command\r\n    // Before doing that, make a copy of the original array\r\n    const longest = items.slice().sort((a, b) => b.usage.length - a.usage.length)[0].usage.length;\r\n\r\n    for (const item of items) {\r\n      let { usage, description } = item;\r\n      const { defaultValue } = item;\r\n      const difference = longest - usage.length;\r\n\r\n      // Compensate the difference to longest property with spaces\r\n      usage += ' '.repeat(difference);\r\n\r\n      // Add some space around it as well\r\n      if (typeof defaultValue !== 'undefined') {\r\n        if (typeof defaultValue === 'boolean') {\r\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\r\n        } else {\r\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\r\n        }\r\n      }\r\n      parts.push(`  ${this.printMainColor(usage)}  ${this.printSubColor(description)}`);\r\n    }\r\n\r\n    return parts;\r\n  },\r\n\r\n  runCommand(details, options) {\r\n    // If help is disabled, remove initializer\r\n    if (details.usage === 'help' && !this.config.help) {\r\n      details.init = false; // eslint-disable-line\r\n    }\r\n\r\n    // If command has initializer, call it\r\n    if (details.init) {\r\n      const sub = [].concat(this.sub);\r\n      sub.shift();\r\n\r\n      return details.init.bind(this)(details.usage, sub, options);\r\n    }\r\n\r\n    return '';\r\n  },\r\n\r\n  isDefined(name, list) {\r\n    // Get all items of kind\r\n    const children = this.details[list];\r\n\r\n    // Check if a child matches the requested name\r\n    for (const child of children) {\r\n      const { usage } = child;\r\n      const type = usage.constructor;\r\n\r\n      if (type === Array && usage.indexOf(name) > -1) {\r\n        return child;\r\n      }\r\n\r\n      if (type === String && usage === name) {\r\n        return child;\r\n      }\r\n    }\r\n\r\n    // If nothing matches, item is not defined\r\n    return false;\r\n  },\r\n};\r\n"]}